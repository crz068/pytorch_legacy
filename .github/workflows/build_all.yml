name: Build PyTorch for Multiple Python Versions

on:
  workflow_dispatch:
    inputs:
      pytorch_version:
        description: 'PyTorch version to build (e.g. 2.0.0, 2.1.0)'
        required: true
        type: string

jobs:
  build-all:
    runs-on: ubuntu-latest
    permissions: 
      contents: write
    steps:
      - name: Set Swap Space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 6

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup directories
        run: |
          mkdir -p _build/artifacts
          mkdir -p _build/base_build

      - name: Set environment variables
        run: |
          echo "PYTORCH_VERSION=${{ github.event.inputs.pytorch_version }}" >> $GITHUB_ENV
          echo "CUDA_VERSION=11.8" >> $GITHUB_ENV
          echo "CUDA_VERSION_NO_DOT=118" >> $GITHUB_ENV

      # Cache PyTorch source code
      - name: Cache PyTorch source
        id: cache-pytorch
        uses: actions/cache@v3
        with:
          path: pytorch
          key: pytorch-${{ github.event.inputs.pytorch_version }}-source

      # Clone PyTorch outside container if not cached
      - name: Clone PyTorch
        if: steps.cache-pytorch.outputs.cache-hit != 'true'
        run: |
          git clone -b "v${{ github.event.inputs.pytorch_version }}" --recursive https://github.com/pytorch/pytorch.git pytorch

      - name: Create Dockerfile
        run: |
          cat > Dockerfile.cuda118 << 'EOL'
          FROM nvidia/cuda:11.8.0-cudnn8-devel-ubuntu22.04

          # Set environment variables to avoid interactive prompts
          ENV DEBIAN_FRONTEND=noninteractive

          # Install dependencies 
          RUN apt-get update && apt-get install -y --no-install-recommends \
              build-essential \
              ca-certificates \
              cmake \
              curl \
              git \
              libjpeg-dev \
              libpng-dev \
              libopenblas-dev \
              ninja-build \
              software-properties-common \
              wget \
              && rm -rf /var/lib/apt/lists/*

          # Install Python from deadsnakes PPA
          RUN apt-get update && \
              apt-get install -y software-properties-common && \
              add-apt-repository ppa:deadsnakes/ppa && \
              apt-get update && \
              apt-get install -y --no-install-recommends \
              python3.8 python3.8-dev python3.8-venv \
              python3.9 python3.9-dev python3.9-venv \
              python3.10 python3.10-dev python3.10-venv \
              python3.11 python3.11-dev python3.11-venv \
              python3.12 python3.12-dev python3.12-venv \
              && rm -rf /var/lib/apt/lists/*

          # Create a script to reliably install pip for all Python versions
          RUN echo '#!/bin/bash \n\
              for version in 3.8 3.9 3.10 3.11 3.12; do \n\
                echo "Installing pip for Python $version" \n\
                # Download get-pip.py and install pip directly \n\
                curl -sS https://bootstrap.pypa.io/get-pip.py -o /tmp/get-pip.py \n\
                python$version /tmp/get-pip.py --break-system-packages \n\
                # Verify pip is installed \n\
                python$version -m pip --version \n\
              done' > /tmp/install_pip.sh && chmod +x /tmp/install_pip.sh && /tmp/install_pip.sh
          
          # Install dependencies for PyTorch for all Python versions
          RUN for version in 3.8 3.9 3.10 3.11 3.12; do \
              python$version -m pip install --no-cache-dir wheel setuptools && \
              python$version -m pip install --no-cache-dir numpy ninja pyyaml mkl mkl-include setuptools cmake cffi typing_extensions; \
              done

          # Set environment variables for build
          ENV USE_CUDA=1 \
              USE_CUDNN=1 \
              USE_MKLDNN=1 \
              BUILD_TEST=0 \
              USE_FBGEMM=1 \
              BUILD_SPLIT_CUDA=ON \
              CMAKE_POLICY_VERSION_MINIMUM=3.5

          WORKDIR /workspace
          EOL

      - name: Create build script
        run: |
          cat > build_wheel.sh << 'EOL'
          #!/usr/bin/env bash
          set -exo pipefail

          PYTHON_VERSION=$1
          
          cd /workspace/pytorch

          # Configure build environment
          export PYTORCH_BUILD_VERSION="${PYTORCH_VERSION}+cu${CUDA_VERSION_NO_DOT}"
          export PYTORCH_BUILD_NUMBER=1
          export TZ=UTC
          export TORCH_CUDA_ARCH_LIST="3.5;3.7"
          export CMAKE_POLICY_VERSION_MINIMUM=3.5
          export MAX_JOBS=2
          export BUILD_SPLIT_CUDA=ON
          
          # Clean up from any previous builds
          rm -rf dist
          
          # # Check if we already have a base build to reuse
          # if [ -d "/base_build/build" ] && [ -n "$(ls -A /base_build/build)" ]; then
          #   echo "Reusing existing build for Python ${PYTHON_VERSION}"
          #   rm -rf build
          #   cp -r /base_build/build .
          # else
          #   echo "No existing build found, creating a new build with Python ${PYTHON_VERSION}"
          #   rm -rf build
          #   python${PYTHON_VERSION} setup.py build
            
          #   # Copy build directory to shared volume for reuse by other Python versions
          #   mkdir -p /base_build
          #   cp -r build /base_build/
          # fi
          
          # Build wheel for this Python version
          echo "Building PyTorch ${PYTORCH_VERSION} wheel for Python ${PYTHON_VERSION}"
          python${PYTHON_VERSION} setup.py bdist_wheel
          
          # Copy wheel to artifacts directory
          cp dist/*.whl /artifacts/
          EOL
          
          chmod +x build_wheel.sh

      - name: Build Docker image
        run: |
          docker build \
            -t pytorch-cuda118-builder \
            -f Dockerfile.cuda118 .

      - name: Build all Python versions
        run: |
          # Run for all Python versions in a single loop
          for py_version in 3.9 3.10 3.11 3.12; do
            docker run --rm \
              -e PYTORCH_VERSION=${{ env.PYTORCH_VERSION }} \
              -e CUDA_VERSION=${{ env.CUDA_VERSION }} \
              -e CUDA_VERSION_NO_DOT=${{ env.CUDA_VERSION_NO_DOT }} \
              -v $(pwd)/pytorch:/workspace/pytorch \
              -v $(pwd)/_build/artifacts:/artifacts \
              -v $(pwd)/_build/base_build:/base_build \
              -v $(pwd)/build_wheel.sh:/workspace/build_wheel.sh \
              pytorch-cuda118-builder \
              bash /workspace/build_wheel.sh $py_version
          done

      - name: List artifacts
        run: |
          ls -la _build/artifacts/
          
      - name: Upload artifacts to GitHub Actions
        uses: actions/upload-artifact@v4
        with:
          name: pytorch-${{ env.PYTORCH_VERSION }}-cu${{ env.CUDA_VERSION_NO_DOT }}-wheels
          path: _build/artifacts/*.whl
          if-no-files-found: error
          
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: pytorch-${{ github.event.inputs.pytorch_version }}
          name: PyTorch ${{ github.event.inputs.pytorch_version }}
          body: |
            PyTorch ${{ github.event.inputs.pytorch_version }} with CUDA 11.8
            Built with architecture support for SM35, SM37.
            
            Includes wheels for Python 3.8, 3.9, 3.10, 3.11, and 3.12.
            Build date: ${{ '2025-04-15' }}
          draft: false
          prerelease: false
          files: _build/artifacts/*.whl
