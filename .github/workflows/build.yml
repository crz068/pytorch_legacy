name: Build PyTorch with CUDA 11.8

on:
  workflow_dispatch:
    inputs:
      pytorch_version:
        description: 'PyTorch version to build (e.g. 2.0.0, 2.1.0)'
        required: true
        type: string
      python_version:
        description: 'Python version to build for'
        required: true
        default: '3.10'
        type: choice
        options:
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup directories
        run: |
          mkdir -p _build/artifacts

      - name: Set environment variables
        run: |
          # Extract just the version number without the dots
          PYTHON_VERSION_NODOT=$(echo ${{ github.event.inputs.python_version }} | tr -d '.')
          echo "PYTORCH_VERSION=${{ github.event.inputs.pytorch_version }}" >> $GITHUB_ENV
          echo "CUDA_VERSION=11.8" >> $GITHUB_ENV
          echo "CUDA_VERSION_NO_DOT=118" >> $GITHUB_ENV
          echo "PYTHON_VERSION=${{ github.event.inputs.python_version }}" >> $GITHUB_ENV
          echo "PYTHON_VERSION_NODOT=${PYTHON_VERSION_NODOT}" >> $GITHUB_ENV

      - name: Create Dockerfile
        run: |
          cat > Dockerfile.cuda118 << 'EOL'
          FROM nvidia/cuda:11.8.0-cudnn8-devel-ubuntu20.04 AS builder

          # Accept Python version as build argument
          ARG PYTHON_VERSION

          # Set environment variables to avoid interactive prompts
          ENV DEBIAN_FRONTEND=noninteractive

          # Install dependencies with newer CMake
          RUN apt-get update && apt-get install -y --no-install-recommends \
              build-essential \
              ca-certificates \
              curl \
              git \
              libjpeg-dev \
              libpng-dev \
              libopenblas-dev \
              ninja-build \
              software-properties-common \
              wget \
              gnupg \
              && rm -rf /var/lib/apt/lists/*

          # Install latest CMake
          RUN wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null && \
              apt-add-repository 'deb https://apt.kitware.com/ubuntu/ focal main' && \
              apt-get update && \
              apt-get install -y cmake && \
              cmake --version && \
              rm -rf /var/lib/apt/lists/*

          # Install Python from deadsnakes PPA
          RUN apt-get update && \
              apt-get install -y software-properties-common && \
              add-apt-repository ppa:deadsnakes/ppa && \
              apt-get update && \
              apt-get install -y --no-install-recommends \
              python${PYTHON_VERSION} \
              python${PYTHON_VERSION}-dev \
              python${PYTHON_VERSION}-distutils \
              && rm -rf /var/lib/apt/lists/*

          # Create symlinks for Python
          RUN ln -sf /usr/bin/python${PYTHON_VERSION} /usr/bin/python3 && \
              ln -sf /usr/bin/python3 /usr/bin/python

          # Install pip for the specific Python version
          RUN curl -sS https://bootstrap.pypa.io/get-pip.py | python

          # Install dependencies for PyTorch
          RUN pip install wheel setuptools && \
              pip install numpy ninja pyyaml mkl mkl-include setuptools cmake cffi typing_extensions

          # Set environment variables for build
          ENV CUDA_HOME="/usr/local/cuda" \
              LIBRARY_PATH="/usr/local/cuda/lib64:${LIBRARY_PATH}" \
              USE_CUDA=1 \
              USE_CUDNN=1 \
              USE_MKLDNN=1 \
              BUILD_TEST=0 \
              USE_FBGEMM=1 \
              BUILD_SPLIT_CUDA=ON

          WORKDIR /workspace
          EOL

      - name: Create build script
        run: |
          cat > build_pytorch.sh << 'EOL'
          #!/usr/bin/env bash
          set -exo pipefail

          # Setup git configuration
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

          # Verify cuDNN is present in the Docker image
          find /usr/local/cuda -name "libcudnn*" -type f
          find /usr/local/cuda -name "cudnn*.h" -type f

          # Clone PyTorch
          echo "Cloning PyTorch version ${PYTORCH_VERSION}"
          git clone -b "v${PYTORCH_VERSION}" --recursive https://github.com/pytorch/pytorch.git /workspace/pytorch
          cd /workspace/pytorch

          # Configure build environment
          export PYTORCH_BUILD_VERSION="${PYTORCH_VERSION}+cu${CUDA_VERSION_NO_DOT}"
          export PYTORCH_BUILD_NUMBER=1
          export TZ=UTC
          export TORCH_CUDA_ARCH_LIST="3.5;3.7;5.0;6.0;7.0;7.5;8.0;8.6"
          
          # For CUDA 11.x builds
          export BUILD_SPLIT_CUDA=ON
          
          # Detect cuDNN paths and set them properly
          CUDNN_INCLUDE=$(find /usr/local -name cudnn.h | head -1 | xargs dirname)
          CUDNN_LIBRARY=$(find /usr/local -name libcudnn.so | head -1)
          
          echo "Found cuDNN include at: ${CUDNN_INCLUDE}"
          echo "Found cuDNN library at: ${CUDNN_LIBRARY}"
          
          export CUDNN_INCLUDE_DIR="${CUDNN_INCLUDE}"
          export CUDNN_LIBRARY="${CUDNN_LIBRARY}"
          
          # Build PyTorch with explicit cuDNN paths
          echo "Building PyTorch ${PYTORCH_VERSION} with CUDA ${CUDA_VERSION}"
          
          # Add verbose output for debugging
          VERBOSE=1 python setup.py bdist_wheel
          
          # Copy wheel file to shared directory
          cp dist/*.whl /artifacts/
          EOL
          
          chmod +x build_pytorch.sh

      - name: Build Docker image
        run: |
          docker build \
            --build-arg PYTHON_VERSION=${{ github.event.inputs.python_version }} \
            -t pytorch-cuda118-builder \
            -f Dockerfile.cuda118 .

      - name: Build PyTorch
        run: |
          docker run --rm \
            -e PYTORCH_VERSION=${{ env.PYTORCH_VERSION }} \
            -e CUDA_VERSION=${{ env.CUDA_VERSION }} \
            -e CUDA_VERSION_NO_DOT=${{ env.CUDA_VERSION_NO_DOT }} \
            -v $(pwd)/_build/artifacts:/artifacts \
            -v $(pwd)/build_pytorch.sh:/workspace/build_pytorch.sh \
            pytorch-cuda118-builder \
            bash /workspace/build_pytorch.sh

      - name: List artifacts
        run: |
          ls -la _build/artifacts/

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: pytorch-${{ github.event.inputs.pytorch_version }}-cuda118
          name: PyTorch ${{ github.event.inputs.pytorch_version }} with CUDA 11.8
          body: |
            PyTorch ${{ github.event.inputs.pytorch_version }} with CUDA 11.8 support
            Built with architecture support for SM35, SM37, and newer architectures.
          draft: false
          prerelease: false
          files: _build/artifacts/*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
